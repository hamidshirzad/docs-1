import{_ as c,r as i,o as p,c as u,a as e,b as t,d as o,w as r,e as s}from"./app-wfQWMRoZ.js";const d="/assets/extensions-5P8MEZJ3.png",h="/assets/extensions-example-VEt0UtAP.png",g="/assets/chrome_fgxfMmgjoX-FakAq42q.png",m="/assets/chrome_fyhW4WftdM-weGk6Imk.png",f="/assets/chrome_VIMFd8NdYA-K-EuPV9Y.png",x="/assets/chrome_LjZ8dXDy6Q-KZVBzylQ.png",b="/assets/chrome_0BBIbwuEUP-fb4F8Tpl.png",_="/assets/chrome_8bGtvNauVp-iK7qzG4q.png",y={},w={id:"getting-started",tabindex:"-1"},v=e("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#",-1),k=s('<h2 id="what-is-an-extension" tabindex="-1"><a class="header-anchor" href="#what-is-an-extension" aria-hidden="true">#</a> What is an Extension?</h2><p>Extensions are hosted html, css and javascript files, small applications, which are hosted by our content delivery network. They allow streamers to add functionality to their OWN3D Pro Dashboard, Scene Editor, and OBS Studio installation. The backend must be hosted by the extension author themselves.</p><p><img src="'+d+'" alt="extension example"></p><h2 id="types-of-extensions" tabindex="-1"><a class="header-anchor" href="#types-of-extensions" aria-hidden="true">#</a> Types of Extensions</h2><p>There are two main use-case types of extensions:</p><h3 id="dashboard-extensions" tabindex="-1"><a class="header-anchor" href="#dashboard-extensions" aria-hidden="true">#</a> Dashboard Extensions</h3><p>With dashboard extensions, you can add new features to the OWN3D Pro Dashboard, like a new widget or a new page allowing the streamer to extend the functionality of the dashboard with your own features.</p><h3 id="scene-editor-widget-extensions" tabindex="-1"><a class="header-anchor" href="#scene-editor-widget-extensions" aria-hidden="true">#</a> Scene Editor Widget Extensions</h3><p>With scene editor widget extensions, you can add new widgets to the OWN3D Pro Scene Editor. This can be something like a real-time heart rate monitor or informative widgets like a leaderboard, donation goal, or a chat.</p><p>These widgets can also be added to the OBS Studio installation using browser sources.</p><h2 id="compatibilities" tabindex="-1"><a class="header-anchor" href="#compatibilities" aria-hidden="true">#</a> Compatibilities</h2><p>Extensions support different compatibilities. Each compatibility represents a &quot;feature&quot; of the extension. For example, a compatibility can be a &quot;<strong>browser-source</strong>&quot; or &quot;<strong>standalone</strong>&quot;, which allows the extension to be used as Scene Editor Widget or as a Standalone App in the OWN3D Pro Dashboard.</p><p>You can also add additional compatibilities to your extension, like &quot;<strong>config</strong>&quot;, which allows you to add a configuration page to your extension details page allowing the streamer to configure your extension.</p><p>Here is a list of all supported compatibilities:</p><table><thead><tr><th>ID</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>2</td><td>Standalone Extension</td><td>The <code>browser-source</code> compatibility allows the extension to be used as a Scene Editor Widget.</td></tr><tr><td>4</td><td>Scene Editor Widget Extension</td><td>The <code>standalone</code> compatibility allows the extension to be used as a Standalone App in the OWN3D Pro Dashboard.</td></tr><tr><td>5</td><td>Configuration Page</td><td>The <code>config</code> compatibility allows you to add a configuration page to your extension details page allowing the streamer to configure your extension.</td></tr></tbody></table><p>Other compatibilities are planned for the future.</p><p><img src="'+d+'" alt="extension example"></p><h2 id="create-your-first-extension" tabindex="-1"><a class="header-anchor" href="#create-your-first-extension" aria-hidden="true">#</a> Create your first Extension</h2>',18),T={href:"https://console.dev.own3d.tv",target:"_blank",rel:"noopener noreferrer"},E=e("p",null,[e("img",{src:h,alt:"extension example"})],-1),S=e("p",null,"To assist you in getting started, we've developed a fundamental boilerplate extension that serves as a starting point for your own extensions. It demonstrates how to use the API and communicate with the backend, and how to construct and package your extension.",-1),D=e("h3",{id:"step-1-checkout-our-example-extension",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#step-1-checkout-our-example-extension","aria-hidden":"true"},"#"),t(" Step 1: Checkout our example extension")],-1),W={href:"https://github.com/own3d/extension-boilerplate",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,[t("The entrypoint of the extension is the "),e("code",null,"index.html"),t(" file.")],-1),I=e("h3",{id:"step-2-create-a-new-extension",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#step-2-create-a-new-extension","aria-hidden":"true"},"#"),t(" Step 2: Create a new extension")],-1),P={href:"https://console.dev.own3d.tv/",target:"_blank",rel:"noopener noreferrer"},V=e("p",null,[e("img",{src:g,alt:"chrome_fgxfMmgjoX.png"})],-1),C=e("strong",null,"Extension",-1),B=e("strong",null,"Extension Version",-1),A=e("h3",{id:"step-3-add-internal-testers",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#step-3-add-internal-testers","aria-hidden":"true"},"#"),t(" Step 3: Add Internal Testers")],-1),O=e("strong",null,"Extension Version",-1),q=s('<p><img src="'+m+'" alt="chrome_fyhW4WftdM.png"></p><h3 id="step-4-define-your-compatibilities-test-your-extension" tabindex="-1"><a class="header-anchor" href="#step-4-define-your-compatibilities-test-your-extension" aria-hidden="true">#</a> Step 4: Define your Compatibilities &amp; Test your Extension</h3><p>Still in your <strong>Extension Version</strong>, you can define the compatibilities of your extension. You can add multiple compatibilities to your extension, like <code>browser-source</code> or <code>standalone</code>. <strong>Without this step, your will not be able to locate your extension in the OWN3D Pro Dashboard or Scene Editor.</strong></p><p>Inside your compatibility settings you can define the following:</p><ul><li><strong>Path</strong>: The relative path to your extension&#39;s entrypoint (e.g. <code>index.html</code>).</li></ul>',5),Y={class:"custom-container tip"},F=e("p",{class:"custom-container-title"},"TIP",-1),j=e("br",null,null,-1),L={href:"https://www.youtube.com/watch?v=dQw4w9WgXcQ",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,"./",-1),R=s(`<p>For Vite, this would look like this:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token comment">// or explicit /1.0.0/ (depending on your version)</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=e("p",null,"For Scene Editor Widgets, you can define additional settings:",-1),U=e("li",null,[e("strong",null,"Sizing"),t(": The initial dimension and position of your widget (e.g. "),e("code",null,"300x300"),t(").")],-1),Q=e("code",null,"input",-1),X=e("code",null,"color",-1),z=e("code",null,"font-settings",-1),Z=s('<p>After defining your compatibilities, you will find <strong>Internal Test URL&#39;s</strong> for your extension. You can use these URL&#39;s to test your extension in the OWN3D Pro Dashboard.</p><p><img src="'+f+'" alt="chrome_VIMFd8NdYA.png"></p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>To test any widget extension, simply open our Scene Builder and add your extension as a new widget found in the <strong>Extensions (Invite Only)</strong> tab. You need to be a member of the internal testers to see your extension there.</p><p><strong>Widgets added to your Scene Builder via this tab will be locked to the selected version and will not be updated automatically, even if you publish a new version!</strong></p><p><img src="'+x+'" alt="chrome_LjZ8dXDy6Q.png"></p></div><h3 id="step-5-upload-it-to-our-cdn" tabindex="-1"><a class="header-anchor" href="#step-5-upload-it-to-our-cdn" aria-hidden="true">#</a> Step 5: Upload it to our CDN</h3>',4),H={class:"custom-container tip"},K=e("p",{class:"custom-container-title"},"TIP",-1),J={href:"https://ngrok.com/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://console.dev.own3d.tv/",target:"_blank",rel:"noopener noreferrer"},ee=s(`<p>Within the developer portal, you can customize your extension&#39;s settings, such as the name, description, as well as the hosting endpoints for the widget, dashboard, and configuration page.</p><h3 id="step-6-review-and-publish-it" tabindex="-1"><a class="header-anchor" href="#step-6-review-and-publish-it" aria-hidden="true">#</a> Step 6: Review and publish it</h3><p>After pushing your extension in a hosted-test state, you can use it in your OWN3D Pro dashboard. There you can test all the features of your extension. If you want to publish your extension to the public, you need to submit your extension for a code and feature review.</p><h2 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h2><h3 id="development-tools-feature-flags" tabindex="-1"><a class="header-anchor" href="#development-tools-feature-flags" aria-hidden="true">#</a> Development Tools &amp; Feature Flags</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p><strong>This tool is really for debugging purposes only!</strong> It is not recommended to use it in a production environment, as some features may break or not work as expected.</p></div><p>To enable the values&#39; inspector, call the following method in your browser console:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>localStorage.setItem(&#39;devtools&#39;, true)
Press: Ctrl+Shift+F
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+'" alt="chrome_0BBIbwuEUP.png"></p><p>Then enable the <strong>Show Values Inspector</strong> feature flag in the developer console. This will show you the values of the form fields of any widget inside the Scene Builder.</p><p><img src="'+_+'" alt="chrome_8bGtvNauVp.png"></p>',11);function te(oe,ne){const l=i("Badge"),n=i("ExternalLinkIcon"),a=i("RouterLink");return p(),u("div",null,[e("h1",w,[v,t(" Getting Started "),o(l,{text:"public beta",type:"warning"})]),k,e("p",null,[t("The following guide will help you to create your first extension, test it, and publish it to the public. You can create your own extensions using our "),e("a",T,[t("Developer Console"),o(n)]),t(".")]),E,S,D,e("p",null,[t("Clone our example extension from "),e("a",W,[t("GitHub"),o(n)]),t(" and start editing the files.")]),N,I,e("p",null,[t("To create a new extension, you need to log in to the "),e("a",P,[t("developer portal"),o(n)]),t(" and create a new extension.")]),V,e("p",null,[t("After filling out and submitting the form, OWN3D will create a new "),C,t(" & "),B,t(" (1.0.0) for you. This Extension Version will be in the "),o(a,{to:"/docs/extensions/live-circle.html"},{default:r(()=>[t("Local Test")]),_:1}),t(" state by default.")]),A,e("p",null,[t("Within your "),O,t(", you can add up to 10 internal testers to your extension. These testers can be added using the "),o(a,{to:"/docs/extensions/access-control.html"},{default:r(()=>[t("Access Control")]),_:1}),t(" settings. You can add them by their ID or username.")]),q,e("div",Y,[F,e("p",null,[t("Because our CDN serves your extension files inside a version subdirectory"),j,t(" (e.g. "),e("a",L,[t("https://extension-id.ext-own3d.tv/1.0.0/index.html"),o(n)]),t("), you will need to set your base path in your Vite, React or Vue configuration to be relative to "),G,t(" before building your extension.")]),R]),M,e("ul",null,[U,e("li",null,[e("strong",null,[o(a,{to:"/docs/extensions/syntax-for-forms.html"},{default:r(()=>[t("Forms")]),_:1})]),t(": The form fields of your widget (e.g. "),Q,t(", "),X,t(", "),z,t(").")])]),Z,e("div",H,[K,e("p",null,[t("You don't need to upload your extension to our CDN during development. You can use a local webserver with HTTPS support to test your extension. You can use "),e("a",J,[t("ngrok"),o(n)]),t(" to create a secure tunnel to your local webserver too.")])]),e("p",null,[t("If you're done with the extension, you can upload it to our CDN using the "),e("a",$,[t("developer portal"),o(n)]),t(".")]),ee])}const ae=c(y,[["render",te],["__file","index.html.vue"]]);export{ae as default};
