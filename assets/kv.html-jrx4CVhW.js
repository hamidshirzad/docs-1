import{_ as i,r as e,o as l,c as r,a as n,b as s,d as a,w as u,e as t}from"./app-wfQWMRoZ.js";const d="/assets/kv-1QCk92G_.png",k={},v={id:"key-value-store",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#key-value-store","aria-hidden":"true"},"#",-1),h=n("p",null,[n("img",{src:d,alt:"kv.png"})],-1),y=n("h2",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),g=n("p",null,"OWN3D's Key-Value Store is a very simple NoSQL databases that allows you to store and retrieve data. It is designed to be used for small amounts of data, such as settings, preferences, and other small pieces of data.",-1),b=n("p",null,"It also features client-side encryption, which means that the data is encrypted before it is sent to the server. The server only sees the encrypted data and cannot decrypt it. The encryption key is stored on the client-side and is never sent to the server.",-1),f=n("p",null,"Values can be up to 16 KB in size. The free tier has a limit of 10,000 operations per month and a maximum storage of 10 MB. Verified Developers can request a higher limit.",-1),w={class:"custom-container warning"},_=n("p",{class:"custom-container-title"},"WARNING",-1),x=n("h2",{id:"installation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#installation","aria-hidden":"true"},"#"),s(" Installation")],-1),S=n("strong",null,"0.2.0-rc.2",-1),T={href:"https://jsr.io/@gz/kv/versions",target:"_blank",rel:"noopener noreferrer"},V=n("strong",null,"0.2.0",-1),I=t(`<p>To install the key-value store client, run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># deno</span>
deno <span class="token function">add</span> jsr:@gz/kv

<span class="token comment"># npm (use any of npx, yarn dlx, pnpm dlx, or bunx)</span>
npx jsr <span class="token function">add</span> @gz/kv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="opening-the-key-value-store" tabindex="-1"><a class="header-anchor" href="#opening-the-key-value-store" aria-hidden="true">#</a> Opening the Key-Value Store</h2><p>Every Key-Value Store has a unique Access Token and is used to access the Key-Value Store. <strong>You should keep it secret and never expose it in your frontend code.</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@gz/kv&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> kv <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    bucket<span class="token operator">:</span> <span class="token string">&#39;9d1cb4c7-c683-4fa9-bc5f-13f5ad1ba745&#39;</span><span class="token punctuation">,</span>
    accessToken<span class="token operator">:</span> <span class="token string">&#39;9b9634a1-1655-4baf-bdf5-c04feffc68bd&#39;</span><span class="token punctuation">,</span>
    region<span class="token operator">:</span> <span class="token string">&#39;eu-central-1&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),q={class:"custom-container tip"},N=n("p",{class:"custom-container-title"},"TIP",-1),U={href:"https://jsr.io/@gz/kv@0.2.0-rc.2",target:"_blank",rel:"noopener noreferrer"},K=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> kv <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),B=t(`<h2 id="creating-a-user-interface" tabindex="-1"><a class="header-anchor" href="#creating-a-user-interface" aria-hidden="true">#</a> Creating a User interface</h2><p>Since we&#39;re going to use TypeScript, we can create an interface for our User object. So it&#39;s easier to work with. Here we define a User interface with a name and an email for example.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-updating-and-reading-a-key-value-pair" tabindex="-1"><a class="header-anchor" href="#creating-updating-and-reading-a-key-value-pair" aria-hidden="true">#</a> Creating, updating, and reading a key-value pair</h2><p>Now, we can create our first key-value pair. We use the <code>set()</code> method to create a new key-value pair. The key is an array of strings and the value is the value you want to store. Internally, the key-array is joined with a separator to create a unique key.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;GhostZero&#39;</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;example@example.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once the key-value pair is created, you can read it back using the <code>get()</code> method. The <code>get()</code> method returns an object with the <code>key</code>, <code>value</code>, and <code>version</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deleting-a-key-value-pair" tabindex="-1"><a class="header-anchor" href="#deleting-a-key-value-pair" aria-hidden="true">#</a> Deleting a key-value pair</h2><p>You can delete a key-value pair using the <code>delete()</code> method. The <code>delete()</code> method returns a boolean indicating if the key-value pair was deleted.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="atomic-transactions" tabindex="-1"><a class="header-anchor" href="#atomic-transactions" aria-hidden="true">#</a> Atomic transactions</h2><p>The OWN3D Key-Value Store supports atomic transactions. This means that you can perform multiple operations in a single transaction. If any of the operations fail, the entire transaction is rolled back.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;GhostZero&#39;</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;example@example.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token function">atomic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">/* or a version */</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Entry did not exist and was created&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Entry already exist. No changes were made&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="improve-querying-with-secondary-indexes" tabindex="-1"><a class="header-anchor" href="#improve-querying-with-secondary-indexes" aria-hidden="true">#</a> Improve querying with secondary indexes</h2><p>With the Key-Value Store, you can only query by the key. If you want to query by a different field, you can create a secondary index. A secondary index is a key-value pair where the key is the field you want to query by and the value is the primary key.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// set the primary key</span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// set the secondary key&#39;s value to be the primary key</span>
    <span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;users_by_email&#39;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>email<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// use as usual</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getByEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// lookup the primary key by the secondary key</span>
    <span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;users_by_email&#39;</span><span class="token punctuation">,</span> email<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> r2 <span class="token operator">=</span> <span class="token keyword">await</span> kv<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> r2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function j(E,z){const p=e("Badge"),c=e("RouterLink"),o=e("ExternalLinkIcon");return l(),r("div",null,[n("h1",v,[m,s(" Key-Value Store "),a(p,{text:"closed beta",type:"warning"})]),h,y,g,b,f,n("div",w,[_,n("p",null,[s("The Key-Value Store is for backend use only. It is not designed to be used in the frontend. For frontend use, we recommend using the "),a(c,{to:"/docs/cloud/remote-config.html"},{default:u(()=>[s("Remote Config Service")]),_:1}),s(" or combining the Key-Value Store with your own backend.")])]),x,n("blockquote",null,[n("p",null,[s("We recommend using at least version "),S,s(" or higher of the key-value store client. You can find the latest version on the "),n("a",T,[s("JSR"),a(o)]),s(" website. Versions below "),V,s(" are not compatible with environment variables and client-side encryption.")])]),I,n("div",q,[N,n("p",null,[s("You can use environment variables to configure the key-value store. The key-value store client will automatically use the "),n("a",U,[s("environment variables"),a(o)]),s(" if they are set.")]),K]),B])}const W=i(k,[["render",j],["__file","kv.html.vue"]]);export{W as default};
