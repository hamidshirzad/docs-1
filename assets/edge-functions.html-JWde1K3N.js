import{_ as l,r as t,o as u,c as r,a as n,b as s,d as a,w as o,e as i}from"./app-wfQWMRoZ.js";const d="/assets/regional-edge-functions-vjs81sgC.png",k="/assets/Postman_Exh1yNav6L-RUJfKkhX.png",m="/assets/chrome_bWPHXYUvq5-CsLW81LC.png",h={},v={id:"edge-functions",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#edge-functions","aria-hidden":"true"},"#",-1),f=n("p",null,[n("img",{src:d,alt:"regional-edge-functions.png"})],-1),b=n("h2",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),y=n("p",null,"Edge Functions are a powerful way to extend the functionality of your extension. They allow you to run serverless functions at the edge of the network, closer to your users, and provide a way to add server-side custom logic to your extension.",-1),w=n("p",null,"They are written in TypeScript and JavaScript and run on the OWN3D platform. Edge Functions are triggered by events such as HTTP requests and can be used to modify the request or response, or to perform custom logic like data validation, authentication, and authorization.",-1),x={href:"https://deno.land/",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"use-cases",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#use-cases","aria-hidden":"true"},"#"),s(" Use Cases")],-1),F=n("h3",{id:"store-and-retrieve-data-from-the-key-value-store",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#store-and-retrieve-data-from-the-key-value-store","aria-hidden":"true"},"#"),s(" Store and Retrieve Data from the Key-Value Store")],-1),E=n("p",null,"Edge Functions can be used to store and retrieve data from the Key-Value Store. This is useful when you want to store small amounts of data, such as settings, preferences, and other small pieces of data.",-1),C=i(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;jsr:@gz/kv&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> kv <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

kv<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token string">&#39;john@example.com&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="user-authentication" tabindex="-1"><a class="header-anchor" href="#user-authentication" aria-hidden="true">#</a> User Authentication</h4><p>Edge Functions can be used to authenticate and authorize requests to your extension. This is especially useful when you want to protect your extension from unauthorized access.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can use JavaScript modules from npm in your Deno programs with the &quot;<strong>npm:</strong>&quot; specifier in your import statements.</p></div><p><img src="`+k+`" alt="postman client"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> jwt <span class="token keyword">from</span> <span class="token string">&#39;npm:jsonwebtoken&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&#39;npm:express&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">verifyToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> authHeader <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>authHeader <span class="token operator">&amp;&amp;</span> authHeader<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Bearer &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> token <span class="token operator">=</span> authHeader<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> authHeader<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">&#39;secret&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> decoded</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Invalid token&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            req<span class="token punctuation">.</span>user <span class="token operator">=</span> decoded<span class="token punctuation">;</span> <span class="token comment">// Add the decoded token to the request object</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Proceed to the next middleware or route handler</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;No token provided&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/extension&#39;</span><span class="token punctuation">,</span> verifyToken<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Token is valid&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">user</span><span class="token operator">:</span> req<span class="token punctuation">.</span>user <span class="token comment">// Use the decoded token information from the middleware</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Server running on port 80</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h2>`,7),D=i(`<h2 id="write-and-test-a-deno-program" tabindex="-1"><a class="header-anchor" href="#write-and-test-a-deno-program" aria-hidden="true">#</a> Write and test a Deno program</h2><p>You can write a simple Deno program and run it using the following command:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Deno<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can run the program using the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>deno run --allow-net server.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="deploy-functions-using-the-developer-console" tabindex="-1"><a class="header-anchor" href="#deploy-functions-using-the-developer-console" aria-hidden="true">#</a> Deploy Functions using the Developer Console</h2><h3 id="create-a-new-edge-function" tabindex="-1"><a class="header-anchor" href="#create-a-new-edge-function" aria-hidden="true">#</a> Create a New Edge Function</h3>`,7),L={href:"https://console.dev.own3d.tv/resources/edge-functions",target:"_blank",rel:"noopener noreferrer"},T=i('<p><img src="'+m+`" alt="create edge function"></p><p>First, you’ll need to provide a name for your Edge Function. This name will be part of the URL where the function is deployed; for example, if you name it &quot;my-function,&quot; it will be accessible at <code>my-function.fn.ext-own3d.tv</code>. By default, we will generate a unique URL for your function, but you can also specify a custom URL if you prefer. Additionally, you can specify any environment variables that will be available to your Edge Function.</p><h2 id="deploy-functions-using-the-own3d-cli" tabindex="-1"><a class="header-anchor" href="#deploy-functions-using-the-own3d-cli" aria-hidden="true">#</a> Deploy Functions using the OWN3D CLI</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The CLI tool is currently in closed beta. We recommend using the Developer Console to create and deploy Edge Functions until the CLI tool is available to the public.</p></div><p>Creating and deploying Edge Functions using the OWN3D CLI allows you to create more complex Edge Functions with multiple files and dependencies. The CLI tool provides a simple way to create, deploy, and manage your Edge Functions without the need to use the Developer Console.</p><h3 id="create-a-new-edge-function-1" tabindex="-1"><a class="header-anchor" href="#create-a-new-edge-function-1" aria-hidden="true">#</a> Create a New Edge Function</h3><p>To create a new Edge Function, you can use the <code>fn:create</code> command from the OWN3D CLI. This will create a new directory with a basic Edge Function template.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>own3d fn:create my-function
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will create a new directory called <code>my-function</code> with the following structure:</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>my-function
├── .gitignore
├── .own3d
│   └── manifest.json
└── index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deploy-the-edge-function" tabindex="-1"><a class="header-anchor" href="#deploy-the-edge-function" aria-hidden="true">#</a> Deploy the Edge Function</h3><p>To deploy the Edge Function, you can use the <code>fn:deploy</code> command from the OWN3D CLI.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>own3d fn:deploy my-function
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will deploy the Edge Function and provide you with the URL where it is deployed.</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>- Compressing my-function function...
  updating: .own3d/ (stored 0%)
  updating: .own3d/manifest.json (deflated 24%)
  updating: index.ts (deflated 27%)
✔ Function compressed
- Deploying my-function function...
✔ Deployment is live!

Website URL: my-function-xxxxxxxxxxxx.fn.ext-own3d.tv
Website URL: my-function.fn.ext-own3d.tv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, you can use the URL to trigger the Edge Function.</p>`,16);function N(I,j){const c=t("Badge"),p=t("ExternalLinkIcon"),e=t("RouterLink");return u(),r("div",null,[n("h1",v,[g,s(" Edge Functions "),a(c,{text:"closed beta",type:"warning"})]),f,b,y,w,n("p",null,[s("Under the hood, Edge Functions are powered by "),n("a",x,[s("Deno"),a(p)]),s(", the most productive, secure, and performant JavaScript and TypeScript runtime. Used by companies like Slack, GitHub, Google, and many others. Deno is backwards compatible with Node.js built-in APIs and over two million modules on npm. Bring the best of the Node.js ecosystem with you to Deno.")]),_,F,E,n("p",null,[s("To learn more about the Key-Value Store, see the "),a(e,{to:"/docs/cloud/kv.html"},{default:o(()=>[s("Key-Value Store")]),_:1}),s(" documentation.")]),C,n("p",null,[s("Getting started with OWN3D Edge Functions is easy. The installation process is simple, and you can start writing and deploying your Edge Functions in minutes using our "),a(e,{to:"/docs/cli/"},{default:o(()=>[s("CLI tool")]),_:1}),s(".")]),n("p",null,[s("If you haven't already our CLI tool, you can follow the instructions in the "),a(e,{to:"/docs/cli/#install-deno-and-the-own3d-cli"},{default:o(()=>[s("CLI installation guide")]),_:1}),s(".")]),D,n("p",null,[s("To create a new Edge Function, start by accessing the Developer Console and navigating to the "),n("a",L,[s("Edge Functions"),a(p)]),s(' section. Click on the "Create Edge Function" button, which will open a new form for entering your function details.')]),T])}const S=l(h,[["render",N],["__file","edge-functions.html.vue"]]);export{S as default};
